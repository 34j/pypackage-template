# questions
project_short_description:
  type: str
  help: "A short description of the project"
  default: "Python package for "

has_cli:
  type: bool
  help: "Does the project have a CLI?"
  default: no

is_django_package:
  type: bool
  help: "Is the project a Django package?"
  default: no

full_name:
  type: str
  help: "What's your name?"
  default: '{{ ("exec(''from subprocess import run; import json; from collections import defaultdict; from contextlib import suppress; j = defaultdict(str)\\nwith suppress(Exception): j = json.loads(run([\"gh\",\"api\",\"user\"], capture_output=True).stdout)'') or j[''name''] or j[''login'']" | eval) | env("PYPACKAGE_TEMPLATE_NAME") }}'

email:
  type: str
  help: "Email address"
  default: '{{ ("exec(''from subprocess import run; import json; from contextlib import suppress; s = \"\"\\nwith suppress(Exception): s = run([\"gh\",\"api\",\"user/emails\"], capture_output=True).stdout'') or ([k for k in json.loads(s) if k[''primary'']][0][''email''] if s else s)" | eval) | env("PYPACKAGE_TEMPLATE_EMAIL") }}'

github_username:
  type: str
  help: "GitHub Username"
  default: '{{ ("exec(''from subprocess import run; import json; from contextlib import suppress; s = \"\"\\nwith suppress(Exception): s = run([\"gh\",\"api\",\"user\"], capture_output=True).stdout'') or (json.loads(s)[''login''] if s else s)" | eval) | env("PYPACKAGE_TEMPLATE_GITHUB_USER") }}'

project_name:
  type: str
  help: "Project Name (human readable version){% if is_django_package %}, should start by 'Django'{% endif %}."
  default: '{{ "exec(''import sys; s = sys.argv[-1]; u = \" \".join([t.capitalize() for t in s.replace(\".\", \" \").replace(\"_\", \" \").replace(\"-\", \" \").split()])'') or u" | eval }}'

project_slug:
  type: str
  help: "Project slug (used for GitHub, PyPI, etc.){% if is_django_package %}, should start by 'django-'{% endif %}."
  default: "{{ project_name.lower().replace(' ', '-') }}"

package_name:
  type: str
  help: "The name of the main Python package (should be a valid Python identifier{% if is_django_package %} and start by 'django_'{% endif %})"
  default: "{{ project_slug.replace('-', '_') }}"

cli_name:
  type: str
  help: "The name of the CLI"
  default: "{{ project_slug }}"
  when: "{{ has_cli }}"

django_app_shorthand:
  type: str
  help: "The Django app shorthand, typically the package name without the 'django_' prefix."
  default: "{{ package_name.removeprefix('django_') }}"
  when: "{{ is_django_package }}"

open_source_license:
  type: str
  help: "The open source license to use"
  choices:
    - "MIT"
    - "Apache Software License 2.0"
    - "GNU General Public License v3"
    - "Not open source"

copyright_year:
  type: str
  help: "Copyright year(s)"
  default: "{% now 'utc', '%Y' %}"

documentation:
  type: bool
  help: "Generate documentation?"
  default: yes

run_poetry_install:
  type: bool
  help: "Run poetry install after {{ package_name }} generation?"
  default: yes

initial_commit:
  type: bool
  help: "Create an initial commit with the generated {{ package_name }}?"
  default: yes

setup_github:
  type: bool
  help: "Setup GitHub repository (requires gh CLI)?"
  default: yes
  when: "{{ initial_commit }}"

setup_pre_commit:
  type: bool
  help: "Setup pre-commit hooks (requires pre-commit)?"
  default: yes

add_me_as_contributor:
  type: bool
  help: "Add me as a contributor?"
  default: yes
  when: "{{ initial_commit }}"

open_with_editor:
  type: bool
  help: 'Open with $VISUAL={{ "" | env("VISUAL") }}'
  default: '{% env "VISUAL", "" != "" %}'

# Copier metadata
_min_copier_version: "9.0.0"
_subdirectory: "project"
_tasks:
  # In Windows, command prompt
  # Move setup script .github/setup-github.bash to /tmp
  - "mv ./.github/setup-github.bash /tmp"
  # Remove license file if no license
  - "{% if open_source_license == 'Not open source' %}rm LICENSE{% endif %}"
  # Cleanup docs
  - "{% if not documentation %}rm -rf docs .readthedocs.yml{% endif %}"
  # Run poetry install
  - "{% if run_poetry_install %}poetry install --with dev{% endif %}"
  # git init
  - "git init && git add --all"
  # Setup pre-commit
  - "{% if setup_pre_commit %}pre-commit autoupdate && pre-commit install && pre-commit run -a || true{% endif %}"
  # Initial commit
  - '{% if initial_commit %}git add --all && git commit -m "chore: initial commit"{% endif %}'
  # Replace true with false in .copier-answers.yml except "documentation: true" for faster copier update
  # - "sed -i '/documentation: true/!s/true/false/g' .copier-answers.yml"
  - "{% if initial_commit %}poetry run python -c \"from pathlib import Path; import re; p = Path('.copier-answers.yml'); p.write_text(re.sub(r'((?:setup_venv|run_poetry_install|initial_commit|setup_github|setup_pre_commit|add_me_as_contributor): )true', r'\\g<1>false', p.read_text()))\"{% endif %}"
  - '{% if initial_commit %}git add --all && git commit -m "chore: update .copier-answers.yml to avoid running commands again"{% endif %}'
  # Add me as a contributor
  - "{% if add_me_as_contributor %}npx --yes all-contributors-cli add {{ github_username }} code,ideas,doc{% endif %}"
  # Setup GitHub
  - '{% if setup_github %}bash /tmp/setup-github.bash {{ github_username }} {{ project_slug }} "{{ project_short_description }}"{% endif %}'
  # Open with editor
  - "{% if open_with_editor %}$VISUAL .{% endif %}"
_jinja_extensions:
  - jinja2_time.TimeExtension
  - jinja2_eval.EvalExtension
  - jinja2_env.EnvExtension
